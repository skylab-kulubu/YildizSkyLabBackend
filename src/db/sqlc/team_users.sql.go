// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: team_users.sql

package sqlc

import (
	"context"
)

const createTeamMember = `-- name: CreateTeamMember :one
INSERT INTO team_users (team_id,user_id,role,created_at,updated_at) values ($1,$2,$3,NOW(),NOW()) RETURNING id, team_id, user_id, role, created_at, updated_at, deleted_at
`

type CreateTeamMemberParams struct {
	TeamID int32  `json:"team_id"`
	UserID int32  `json:"user_id"`
	Role   string `json:"role"`
}

func (q *Queries) CreateTeamMember(ctx context.Context, arg CreateTeamMemberParams) (TeamUser, error) {
	row := q.db.QueryRowContext(ctx, createTeamMember, arg.TeamID, arg.UserID, arg.Role)
	var i TeamUser
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteTeamMember = `-- name: DeleteTeamMember :exec
UPDATE team_users SET deleted_at = NOW() WHERE team_id = $1 AND user_id = $2
`

type DeleteTeamMemberParams struct {
	TeamID int32 `json:"team_id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeleteTeamMember(ctx context.Context, arg DeleteTeamMemberParams) error {
	_, err := q.db.ExecContext(ctx, deleteTeamMember, arg.TeamID, arg.UserID)
	return err
}

const deleteTeamMemberByTeamId = `-- name: DeleteTeamMemberByTeamId :exec
UPDATE team_users SET deleted_at = NOW() WHERE team_id = $1
`

func (q *Queries) DeleteTeamMemberByTeamId(ctx context.Context, teamID int32) error {
	_, err := q.db.ExecContext(ctx, deleteTeamMemberByTeamId, teamID)
	return err
}

const deleteTeamMemberByUserId = `-- name: DeleteTeamMemberByUserId :exec
UPDATE team_users SET deleted_at = NOW() WHERE user_id = $1
`

func (q *Queries) DeleteTeamMemberByUserId(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteTeamMemberByUserId, userID)
	return err
}

const getTeamMember = `-- name: GetTeamMember :one
SELECT id, team_id, user_id, role, created_at, updated_at, deleted_at FROM team_users WHERE team_id = $1 AND user_id = $2 AND deleted_at IS NULL
`

type GetTeamMemberParams struct {
	TeamID int32 `json:"team_id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) GetTeamMember(ctx context.Context, arg GetTeamMemberParams) (TeamUser, error) {
	row := q.db.QueryRowContext(ctx, getTeamMember, arg.TeamID, arg.UserID)
	var i TeamUser
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
