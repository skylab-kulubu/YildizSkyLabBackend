// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: project_users.sql

package sqlc

import (
	"context"
)

const createProjectMember = `-- name: CreateProjectMember :one
INSERT INTO project_users(user_id, project_id,role,created_at,updated_at) values ($1,$2,$3,NOW(),NOW()) RETURNING id, project_id, user_id, role, created_at, updated_at, deleted_at
`

type CreateProjectMemberParams struct {
	UserID    int32  `json:"user_id"`
	ProjectID int32  `json:"project_id"`
	Role      string `json:"role"`
}

func (q *Queries) CreateProjectMember(ctx context.Context, arg CreateProjectMemberParams) (ProjectUser, error) {
	row := q.db.QueryRowContext(ctx, createProjectMember, arg.UserID, arg.ProjectID, arg.Role)
	var i ProjectUser
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteProjectMember = `-- name: DeleteProjectMember :exec
UPDATE project_users SET deleted_at = NOW() WHERE user_id = $1 AND project_id = $2
`

type DeleteProjectMemberParams struct {
	UserID    int32 `json:"user_id"`
	ProjectID int32 `json:"project_id"`
}

func (q *Queries) DeleteProjectMember(ctx context.Context, arg DeleteProjectMemberParams) error {
	_, err := q.db.ExecContext(ctx, deleteProjectMember, arg.UserID, arg.ProjectID)
	return err
}

const deleteProjectMemberByProjectId = `-- name: DeleteProjectMemberByProjectId :exec
UPDATE project_users SET deleted_at = NOW() WHERE project_id = $1
`

func (q *Queries) DeleteProjectMemberByProjectId(ctx context.Context, projectID int32) error {
	_, err := q.db.ExecContext(ctx, deleteProjectMemberByProjectId, projectID)
	return err
}

const deleteProjectMemberByUserId = `-- name: DeleteProjectMemberByUserId :exec
UPDATE project_users SET deleted_at = NOW() WHERE user_id= $1
`

func (q *Queries) DeleteProjectMemberByUserId(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteProjectMemberByUserId, userID)
	return err
}

const getProjectMember = `-- name: GetProjectMember :one
SELECT id, project_id, user_id, role, created_at, updated_at, deleted_at FROM project_users WHERE user_id = $1 AND project_id = $2 AND deleted_at IS NULL
`

type GetProjectMemberParams struct {
	UserID    int32 `json:"user_id"`
	ProjectID int32 `json:"project_id"`
}

func (q *Queries) GetProjectMember(ctx context.Context, arg GetProjectMemberParams) (ProjectUser, error) {
	row := q.db.QueryRowContext(ctx, getProjectMember, arg.UserID, arg.ProjectID)
	var i ProjectUser
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
