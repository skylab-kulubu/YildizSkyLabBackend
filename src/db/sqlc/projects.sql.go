// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: projects.sql

package sqlc

import (
	"context"
	"encoding/json"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
    name,
    description,
    created_at,
    updated_at
) VALUES (
    $1,
    $2,
    NOW(),
    NOW()
) RETURNING id, name, description, created_at, updated_at, deleted_at
`

type CreateProjectParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject, arg.Name, arg.Description)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
UPDATE projects set
    deleted_at = NOW()
WHERE
    id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProject, id)
	return err
}

const getAllProjects = `-- name: GetAllProjects :many
SELECT id, name, description, created_at, updated_at, deleted_at FROM projects WHERE deleted_at IS NULL LIMIT $1 OFFSET $2
`

type GetAllProjectsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllProjects(ctx context.Context, arg GetAllProjectsParams) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getAllProjects, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Project{}
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProject = `-- name: GetProject :one
SELECT
    p.id,
    p.name,
    p.description,
    json_agg(
        json_build_object(
                'user_id', u.id,
                'user_name', u.name,
                'user_last_name', u.last_name,
                'user_email', u.email,
                'user_password', u.password,
                'user_telephone_number', u.telephone_number,
                'user_university', u.university,
                'user_department', u.department,
                'user_date_of_birth', u.date_of_birth,
                'user_role', u.role
        )
    ) as leads,
    json_agg(
        json_build_object(
                'user_id', u.id,
                'user_name', u.name,
                'user_last_name', u.last_name,
                'user_email', u.email,
                'user_password', u.password,
                'user_telephone_number', u.telephone_number,
                'user_university', u.university,
                'user_department', u.department,
                'user_date_of_birth', u.date_of_birth,
                'user_role', u.role
        )
    ) as members,
    json_agg(
            json_build_object(
                    'team_id', t.id,
                    'team_name', t.name,
                    'team_description', t.description
            )
    ) as teams
FROM projects p
LEFT JOIN project_users pu ON p.id = pu.project_id AND pu.role = 'lead'
LEFT JOIN users u on pu.user_id = u.id
LEFT JOIN team_projects tp ON p.id = tp.project_id
LEFT JOIN teams t on tp.team_id = t.id
WHERE p.id = $1
GROUP BY p.id
`

type GetProjectRow struct {
	ID          int32           `json:"id"`
	Name        string          `json:"name"`
	Description string          `json:"description"`
	Leads       json.RawMessage `json:"leads"`
	Members     json.RawMessage `json:"members"`
	Teams       json.RawMessage `json:"teams"`
}

func (q *Queries) GetProject(ctx context.Context, id int32) (GetProjectRow, error) {
	row := q.db.QueryRowContext(ctx, getProject, id)
	var i GetProjectRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Leads,
		&i.Members,
		&i.Teams,
	)
	return i, err
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects set
    name = $1,
    description = $2,
    updated_at = NOW()
WHERE
    id = $3
RETURNING id, name, description, created_at, updated_at, deleted_at
`

type UpdateProjectParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, updateProject, arg.Name, arg.Description, arg.ID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
