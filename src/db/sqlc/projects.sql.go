// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: projects.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
    name,
    description,
    created_at,
    updated_at
) VALUES (
    $1,
    $2,
    NOW(),
    NOW()
) RETURNING id, name, description, created_at, updated_at, deleted_at
`

type CreateProjectParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject, arg.Name, arg.Description)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
UPDATE projects set
    deleted_at = NOW()
WHERE
    id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProject, id)
	return err
}

const getAllProjects = `-- name: GetAllProjects :many
SELECT id, name, description, created_at, updated_at, deleted_at FROM projects WHERE deleted_at IS NULL LIMIT $1 OFFSET $2
`

type GetAllProjectsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllProjects(ctx context.Context, arg GetAllProjectsParams) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getAllProjects, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Project{}
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectWithDetails = `-- name: GetProjectWithDetails :many
SELECT
    p.id,
    p.name,
    p.description,
    l.id AS lead_id,
    l.name AS lead_name,
    l.last_name AS lead_last_name,
    l.email AS lead_email,
    l.telephone_number AS lead_telephone_number,
    l.university AS lead_university,
    l.department AS lead_department,
    l.date_of_birth AS lead_date_of_birth,
    t.id AS team_id,
    t.name AS team_name,
    t.description AS team_description,
    u.id AS member_id,
    u.name AS member_name,
    u.last_name AS member_last_name,
    u.email AS member_email,
    u.telephone_number AS member_telephone_number,
    u.university AS member_university,
    u.department AS member_department,
    u.date_of_birth AS member_date_of_birth
FROM projects p
LEFT JOIN project_users pu ON p.id = pu.project_id AND pu.role = 'lead' AND pu.deleted_at IS NULL
LEFT JOIN users l ON pu.user_id = l.id AND l.deleted_at IS NULL 
LEFT JOIN team_projects tp ON p.id = tp.project_id AND tp.deleted_at IS NULL 
LEFT JOIN teams t ON tp.team_id = t.id AND t.deleted_at IS NULL 
LEFT JOIN project_users pm ON p.id = tm.project_id AND tm.role = 'member' AND tm.deleted_at IS NULL 
LEFT JOIN users u on pm.user_id = u.id AND u.deleted_at IS NULL 
WHERE p.id = $1 
GROUP BY t.id, u.id, p.id, l.id
`

type GetProjectWithDetailsRow struct {
	ID                    int32          `json:"id"`
	Name                  string         `json:"name"`
	Description           string         `json:"description"`
	LeadID                sql.NullInt32  `json:"lead_id"`
	LeadName              sql.NullString `json:"lead_name"`
	LeadLastName          sql.NullString `json:"lead_last_name"`
	LeadEmail             sql.NullString `json:"lead_email"`
	LeadTelephoneNumber   sql.NullString `json:"lead_telephone_number"`
	LeadUniversity        sql.NullString `json:"lead_university"`
	LeadDepartment        sql.NullString `json:"lead_department"`
	LeadDateOfBirth       sql.NullTime   `json:"lead_date_of_birth"`
	TeamID                sql.NullInt32  `json:"team_id"`
	TeamName              sql.NullString `json:"team_name"`
	TeamDescription       sql.NullString `json:"team_description"`
	MemberID              sql.NullInt32  `json:"member_id"`
	MemberName            sql.NullString `json:"member_name"`
	MemberLastName        sql.NullString `json:"member_last_name"`
	MemberEmail           sql.NullString `json:"member_email"`
	MemberTelephoneNumber sql.NullString `json:"member_telephone_number"`
	MemberUniversity      sql.NullString `json:"member_university"`
	MemberDepartment      sql.NullString `json:"member_department"`
	MemberDateOfBirth     sql.NullTime   `json:"member_date_of_birth"`
}

func (q *Queries) GetProjectWithDetails(ctx context.Context, id int32) ([]GetProjectWithDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, getProjectWithDetails, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProjectWithDetailsRow{}
	for rows.Next() {
		var i GetProjectWithDetailsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.LeadID,
			&i.LeadName,
			&i.LeadLastName,
			&i.LeadEmail,
			&i.LeadTelephoneNumber,
			&i.LeadUniversity,
			&i.LeadDepartment,
			&i.LeadDateOfBirth,
			&i.TeamID,
			&i.TeamName,
			&i.TeamDescription,
			&i.MemberID,
			&i.MemberName,
			&i.MemberLastName,
			&i.MemberEmail,
			&i.MemberTelephoneNumber,
			&i.MemberUniversity,
			&i.MemberDepartment,
			&i.MemberDateOfBirth,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects set
    name = $1,
    description = $2,
    updated_at = NOW()
WHERE
    id = $3
RETURNING id, name, description, created_at, updated_at, deleted_at
`

type UpdateProjectParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, updateProject, arg.Name, arg.Description, arg.ID)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
