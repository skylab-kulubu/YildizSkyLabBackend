// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlc

import (
	"context"
	"time"
)

const checkUserIfExistByEmail = `-- name: CheckUserIfExistByEmail :one
SELECT id, name, last_name, email, password, telephone_number, university, department, date_of_birth, role, active, created_at, updated_at, deleted_at FROM users
WHERE email = $1
`

func (q *Queries) CheckUserIfExistByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, checkUserIfExistByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.TelephoneNumber,
		&i.University,
		&i.Department,
		&i.DateOfBirth,
		&i.Role,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name,
    last_name,
    email,
    password,
    telephone_number,
    role,
    university,
    department,
    date_of_birth,
    active,
    created_at,
    updated_at
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    NOW(),
    NOW()
) RETURNING id, name, last_name, email, password, telephone_number, university, department, date_of_birth, role, active, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Name            string    `json:"name"`
	LastName        string    `json:"last_name"`
	Email           string    `json:"email"`
	Password        string    `json:"password"`
	TelephoneNumber string    `json:"telephone_number"`
	Role            string    `json:"role"`
	University      string    `json:"university"`
	Department      string    `json:"department"`
	DateOfBirth     time.Time `json:"date_of_birth"`
	Active          bool      `json:"active"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.TelephoneNumber,
		arg.Role,
		arg.University,
		arg.Department,
		arg.DateOfBirth,
		arg.Active,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.TelephoneNumber,
		&i.University,
		&i.Department,
		&i.DateOfBirth,
		&i.Role,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users SET
    deleted_at = NOW()
WHERE
    id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT
    u.id AS user_id,
	u.name,
	u.last_name,
	u.email,
	u.password,
	u.telephone_number,
	u.role,
	u.university,
	u.department,
	u.date_of_birth,
	u.active,
	COALESCE(STRING_AGG(DISTINCT t.name, ',')) AS team_names,
	COALESCE(STRING_AGG(DISTINCT p.name, ',')) AS project_names
FROM
	users u
LEFT JOIN
	team_users ut on u.id =ut.user_id
LEFT JOIN
	teams t on ut.team_id = t.id
LEFT JOIN
    project_users up on u.id = up.user_id
LEFT JOIN
    projects p on up.project_id = p.id
WHERE
    u.deleted_at IS NULL
GROUP BY
	u.id, u.email
LIMIT $1 OFFSET $2
`

type GetAllUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllUsersRow struct {
	UserID          int32       `json:"user_id"`
	Name            string      `json:"name"`
	LastName        string      `json:"last_name"`
	Email           string      `json:"email"`
	Password        string      `json:"password"`
	TelephoneNumber string      `json:"telephone_number"`
	Role            string      `json:"role"`
	University      string      `json:"university"`
	Department      string      `json:"department"`
	DateOfBirth     time.Time   `json:"date_of_birth"`
	Active          bool        `json:"active"`
	TeamNames       interface{} `json:"team_names"`
	ProjectNames    interface{} `json:"project_names"`
}

func (q *Queries) GetAllUsers(ctx context.Context, arg GetAllUsersParams) ([]GetAllUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllUsersRow{}
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.UserID,
			&i.Name,
			&i.LastName,
			&i.Email,
			&i.Password,
			&i.TelephoneNumber,
			&i.Role,
			&i.University,
			&i.Department,
			&i.DateOfBirth,
			&i.Active,
			&i.TeamNames,
			&i.ProjectNames,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT
    u.id AS user_id,
	u.name,
	u.last_name,
	u.email,
	u.password,
	u.telephone_number,
	u.role,
	u.university,
	u.department,
	u.date_of_birth,
	u.active,
	COALESCE(STRING_AGG(DISTINCT t.name, ',')) AS team_names,
	COALESCE(STRING_AGG(DISTINCT p.name, ',')) AS project_names
FROM
	users u
LEFT JOIN
	team_users ut on u.id =ut.user_id
LEFT JOIN
	teams t on ut.team_id = t.id
LEFT JOIN
    project_users up on u.id = up.user_id
LEFT JOIN
    projects p on up.project_id = p.id
WHERE
    u.id = $1 AND u.deleted_at IS NULL
GROUP BY
	u.id, u.email
`

type GetUserRow struct {
	UserID          int32       `json:"user_id"`
	Name            string      `json:"name"`
	LastName        string      `json:"last_name"`
	Email           string      `json:"email"`
	Password        string      `json:"password"`
	TelephoneNumber string      `json:"telephone_number"`
	Role            string      `json:"role"`
	University      string      `json:"university"`
	Department      string      `json:"department"`
	DateOfBirth     time.Time   `json:"date_of_birth"`
	Active          bool        `json:"active"`
	TeamNames       interface{} `json:"team_names"`
	ProjectNames    interface{} `json:"project_names"`
}

func (q *Queries) GetUser(ctx context.Context, id int32) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.TelephoneNumber,
		&i.Role,
		&i.University,
		&i.Department,
		&i.DateOfBirth,
		&i.Active,
		&i.TeamNames,
		&i.ProjectNames,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    u.id AS user_id,
		u.name,
		u.last_name,
		u.email,
		u.password,
		u.telephone_number,
		u.role,
		u.university,
		u.department,
		u.date_of_birth,
		u.active,
		COALESCE(STRING_AGG(DISTINCT t.name, ',')) AS team_names,
		COALESCE(STRING_AGG(DISTINCT p.name, ',')) AS project_names
FROM
		users u
LEFT JOIN
		team_users ut on u.id =ut.user_id
LEFT JOIN
		teams t on ut.team_id = t.id
LEFT JOIN
    project_users up on u.id = up.user_id
LEFT JOIN
    projects p on up.project_id = p.id
WHERE
    u.email = $1 AND u.deleted_at IS NULL
GROUP BY
		u.id, u.email
`

type GetUserByEmailRow struct {
	UserID          int32       `json:"user_id"`
	Name            string      `json:"name"`
	LastName        string      `json:"last_name"`
	Email           string      `json:"email"`
	Password        string      `json:"password"`
	TelephoneNumber string      `json:"telephone_number"`
	Role            string      `json:"role"`
	University      string      `json:"university"`
	Department      string      `json:"department"`
	DateOfBirth     time.Time   `json:"date_of_birth"`
	Active          bool        `json:"active"`
	TeamNames       interface{} `json:"team_names"`
	ProjectNames    interface{} `json:"project_names"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.TelephoneNumber,
		&i.Role,
		&i.University,
		&i.Department,
		&i.DateOfBirth,
		&i.Active,
		&i.TeamNames,
		&i.ProjectNames,
	)
	return i, err
}

const overwriteUser = `-- name: OverwriteUser :one
UPDATE users SET
    name = $2,
    last_name = $3,
    email = $4,
    password = $5,
    telephone_number = $6,
    role = $7,
    university = $8,
    department = $9,
    date_of_birth = $10,
    active = $11,
    created_at = NOW(),
    updated_at = NOW(),
    deleted_at = NULL
WHERE
    id = $1
returning id, name, last_name, email, password, telephone_number, university, department, date_of_birth, role, active, created_at, updated_at, deleted_at
`

type OverwriteUserParams struct {
	ID              int32     `json:"id"`
	Name            string    `json:"name"`
	LastName        string    `json:"last_name"`
	Email           string    `json:"email"`
	Password        string    `json:"password"`
	TelephoneNumber string    `json:"telephone_number"`
	Role            string    `json:"role"`
	University      string    `json:"university"`
	Department      string    `json:"department"`
	DateOfBirth     time.Time `json:"date_of_birth"`
	Active          bool      `json:"active"`
}

func (q *Queries) OverwriteUser(ctx context.Context, arg OverwriteUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, overwriteUser,
		arg.ID,
		arg.Name,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.TelephoneNumber,
		arg.Role,
		arg.University,
		arg.Department,
		arg.DateOfBirth,
		arg.Active,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.TelephoneNumber,
		&i.University,
		&i.Department,
		&i.DateOfBirth,
		&i.Role,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET
    name = $2,
    last_name = $3,
    email = $4,
    password = $5,
    telephone_number = $6,
    role = $7,
    university = $8,
    department = $9,
    date_of_birth = $10,
    active = $11,
    updated_at = NOW()
WHERE
    id = $1
returning id, name, last_name, email, password, telephone_number, university, department, date_of_birth, role, active, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	ID              int32     `json:"id"`
	Name            string    `json:"name"`
	LastName        string    `json:"last_name"`
	Email           string    `json:"email"`
	Password        string    `json:"password"`
	TelephoneNumber string    `json:"telephone_number"`
	Role            string    `json:"role"`
	University      string    `json:"university"`
	Department      string    `json:"department"`
	DateOfBirth     time.Time `json:"date_of_birth"`
	Active          bool      `json:"active"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.TelephoneNumber,
		arg.Role,
		arg.University,
		arg.Department,
		arg.DateOfBirth,
		arg.Active,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.TelephoneNumber,
		&i.University,
		&i.Department,
		&i.DateOfBirth,
		&i.Role,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
