// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const checkUserIfExistByEmail = `-- name: CheckUserIfExistByEmail :one
SELECT id, name, last_name, email, password, telephone_number, university, department, date_of_birth, role, created_at, updated_at, deleted_at FROM users
WHERE email = $1
`

func (q *Queries) CheckUserIfExistByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, checkUserIfExistByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.TelephoneNumber,
		&i.University,
		&i.Department,
		&i.DateOfBirth,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name,
    last_name,
    email,
    password,
    telephone_number,
    role,
    university,
    department,
    date_of_birth,
    created_at,
    updated_at
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    NOW(),
    NOW()
) RETURNING id, name, last_name, email, password, telephone_number, university, department, date_of_birth, role, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Name            string    `json:"name"`
	LastName        string    `json:"last_name"`
	Email           string    `json:"email"`
	Password        string    `json:"password"`
	TelephoneNumber string    `json:"telephone_number"`
	Role            string    `json:"role"`
	University      string    `json:"university"`
	Department      string    `json:"department"`
	DateOfBirth     time.Time `json:"date_of_birth"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.TelephoneNumber,
		arg.Role,
		arg.University,
		arg.Department,
		arg.DateOfBirth,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.TelephoneNumber,
		&i.University,
		&i.Department,
		&i.DateOfBirth,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users SET
    deleted_at = NOW()
WHERE
    id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
Select id, name, last_name, email, password, telephone_number, university, department, date_of_birth, role, created_at, updated_at, deleted_at from users where deleted_at is null LIMIT $1 OFFSET $2
`

type GetAllUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllUsers(ctx context.Context, arg GetAllUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.LastName,
			&i.Email,
			&i.Password,
			&i.TelephoneNumber,
			&i.University,
			&i.Department,
			&i.DateOfBirth,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
        u.id,
        u.name,
        u.last_name,
        u.email,
        u.password,
        u.telephone_number,
        u.university,
        u.department,
        u.date_of_birth,
        u.role,
        t.id as team_id,
        t.name as team_name,
        t.description as team_description,
        p.id as project_id,
        p.name as project_name,
        p.description as project_description
FROM users u
LEFT JOIN team_users tu ON u.id = tu.user_id
LEFT JOIN teams t ON tu.team_id = t.id
LEFT JOIN project_users pu ON u.id = pu.user_id
LEFT JOIN projects p ON pu.project_id = p.id
WHERE u.email = $1
GROUP BY u.id, t.id, p.id
`

type GetUserByEmailRow struct {
	ID                 int32          `json:"id"`
	Name               string         `json:"name"`
	LastName           string         `json:"last_name"`
	Email              string         `json:"email"`
	Password           string         `json:"password"`
	TelephoneNumber    string         `json:"telephone_number"`
	University         string         `json:"university"`
	Department         string         `json:"department"`
	DateOfBirth        time.Time      `json:"date_of_birth"`
	Role               string         `json:"role"`
	TeamID             sql.NullInt32  `json:"team_id"`
	TeamName           sql.NullString `json:"team_name"`
	TeamDescription    sql.NullString `json:"team_description"`
	ProjectID          sql.NullInt32  `json:"project_id"`
	ProjectName        sql.NullString `json:"project_name"`
	ProjectDescription sql.NullString `json:"project_description"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.TelephoneNumber,
		&i.University,
		&i.Department,
		&i.DateOfBirth,
		&i.Role,
		&i.TeamID,
		&i.TeamName,
		&i.TeamDescription,
		&i.ProjectID,
		&i.ProjectName,
		&i.ProjectDescription,
	)
	return i, err
}

const getUserWithDetails = `-- name: GetUserWithDetails :many
SELECT
        u.id,
        u.name,
        u.last_name,
        u.email,
        u.telephone_number,
        u.university,
        u.department,
        u.date_of_birth,
        u.role,
        t.id as team_id,
        t.name as team_name,
        t.description as team_description,
        p.id as project_id,
        p.name as project_name,
        p.description as project_description
FROM users u
LEFT JOIN team_users tu ON u.id = tu.user_id
LEFT JOIN teams t ON tu.team_id = t.id
LEFT JOIN project_users pu ON u.id = pu.user_id
LEFT JOIN projects p ON pu.project_id = p.id
WHERE u.id = $1
GROUP BY u.id, t.id, p.id
`

type GetUserWithDetailsRow struct {
	ID                 int32          `json:"id"`
	Name               string         `json:"name"`
	LastName           string         `json:"last_name"`
	Email              string         `json:"email"`
	TelephoneNumber    string         `json:"telephone_number"`
	University         string         `json:"university"`
	Department         string         `json:"department"`
	DateOfBirth        time.Time      `json:"date_of_birth"`
	Role               string         `json:"role"`
	TeamID             sql.NullInt32  `json:"team_id"`
	TeamName           sql.NullString `json:"team_name"`
	TeamDescription    sql.NullString `json:"team_description"`
	ProjectID          sql.NullInt32  `json:"project_id"`
	ProjectName        sql.NullString `json:"project_name"`
	ProjectDescription sql.NullString `json:"project_description"`
}

func (q *Queries) GetUserWithDetails(ctx context.Context, id int32) ([]GetUserWithDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserWithDetails, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserWithDetailsRow{}
	for rows.Next() {
		var i GetUserWithDetailsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.LastName,
			&i.Email,
			&i.TelephoneNumber,
			&i.University,
			&i.Department,
			&i.DateOfBirth,
			&i.Role,
			&i.TeamID,
			&i.TeamName,
			&i.TeamDescription,
			&i.ProjectID,
			&i.ProjectName,
			&i.ProjectDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserWithNoDetails = `-- name: GetUserWithNoDetails :one
SELECT id, name, last_name, email, password, telephone_number, university, department, date_of_birth, role, created_at, updated_at, deleted_at FROM users WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserWithNoDetails(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserWithNoDetails, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.TelephoneNumber,
		&i.University,
		&i.Department,
		&i.DateOfBirth,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const overwriteUser = `-- name: OverwriteUser :one
UPDATE users SET
    name = $2,
    last_name = $3,
    email = $4,
    password = $5,
    telephone_number = $6,
    role = $7,
    university = $8,
    department = $9,
    date_of_birth = $10,
    created_at = NOW(),
    updated_at = NOW(),
    deleted_at = NULL
WHERE
    id = $1
returning id, name, last_name, email, password, telephone_number, university, department, date_of_birth, role, created_at, updated_at, deleted_at
`

type OverwriteUserParams struct {
	ID              int32     `json:"id"`
	Name            string    `json:"name"`
	LastName        string    `json:"last_name"`
	Email           string    `json:"email"`
	Password        string    `json:"password"`
	TelephoneNumber string    `json:"telephone_number"`
	Role            string    `json:"role"`
	University      string    `json:"university"`
	Department      string    `json:"department"`
	DateOfBirth     time.Time `json:"date_of_birth"`
}

func (q *Queries) OverwriteUser(ctx context.Context, arg OverwriteUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, overwriteUser,
		arg.ID,
		arg.Name,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.TelephoneNumber,
		arg.Role,
		arg.University,
		arg.Department,
		arg.DateOfBirth,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.TelephoneNumber,
		&i.University,
		&i.Department,
		&i.DateOfBirth,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET
    name = $2,
    last_name = $3,
    email = $4,
    password = $5,
    telephone_number = $6,
    role = $7,
    university = $8,
    department = $9,
    date_of_birth = $10,
    updated_at = NOW()
WHERE
    id = $1
returning id, name, last_name, email, password, telephone_number, university, department, date_of_birth, role, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	ID              int32     `json:"id"`
	Name            string    `json:"name"`
	LastName        string    `json:"last_name"`
	Email           string    `json:"email"`
	Password        string    `json:"password"`
	TelephoneNumber string    `json:"telephone_number"`
	Role            string    `json:"role"`
	University      string    `json:"university"`
	Department      string    `json:"department"`
	DateOfBirth     time.Time `json:"date_of_birth"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.TelephoneNumber,
		arg.Role,
		arg.University,
		arg.Department,
		arg.DateOfBirth,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.TelephoneNumber,
		&i.University,
		&i.Department,
		&i.DateOfBirth,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
