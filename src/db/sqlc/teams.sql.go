// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: teams.sql

package sqlc

import (
	"context"
	"encoding/json"
)

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (
    name,
    description,
    created_at,
    updated_at
) VALUES (
    $1,
    $2,
    NOW(),
    NOW()
) RETURNING id, name, description, created_at, updated_at, deleted_at
`

type CreateTeamParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, createTeam, arg.Name, arg.Description)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteTeam = `-- name: DeleteTeam :exec
UPDATE teams set
    deleted_at = NOW()
WHERE
    id = $1
`

func (q *Queries) DeleteTeam(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTeam, id)
	return err
}

const getAllTeams = `-- name: GetAllTeams :many
SELECT id, name, description, created_at, updated_at, deleted_at FROM teams WHERE deleted_at IS NULL LIMIT $1 OFFSET $2
`

type GetAllTeamsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllTeams(ctx context.Context, arg GetAllTeamsParams) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, getAllTeams, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Team{}
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeam = `-- name: GetTeam :one
SELECT 
        t.id,
        t.name,
        t.description,
        json_agg(
                json_build_object(
                        'user_id', u.id,
                        'user_name', u.name,
                        'user_last_name', u.last_name,
                        'user_email', u.email,
                        'user_password', u.password,
                        'user_telephone_number', u.telephone_number,
                        'user_university', u.university,
                        'user_department', u.department,
                        'user_date_of_birth', u.date_of_birth,
                        'user_role', u.role
                )
        ) as leads,
        json_agg(
                json_build_object(
                        'user_id', u.id,
                        'user_name', u.name,
                        'user_last_name', u.last_name,
                        'user_email', u.email,
                        'user_password', u.password,
                        'user_telephone_number', u.telephone_number,
                        'user_university', u.university,
                        'user_department', u.department,
                        'user_date_of_birth', u.date_of_birth,
                        'user_role', u.role
                )
        ) as members,
        json_agg(
                json_build_object(
                        'project_id', p.id,
                        'projet_name', p.name,
                        'project_description', p.description
                )
        ) as projects
FROM teams t
LEFT JOIN team_users tu ON t.id = tu.team_id AND tu.role = 'lead'
LEFT JOIN users u on tu.user_id = u.id
LEFT JOIN team_projects tp ON t.id = tp.team_id
LEFT JOIN projects p on tp.project_id = p.id
WHERE t.id = $1
GROUP BY t.id
`

type GetTeamRow struct {
	ID          int32           `json:"id"`
	Name        string          `json:"name"`
	Description string          `json:"description"`
	Leads       json.RawMessage `json:"leads"`
	Members     json.RawMessage `json:"members"`
	Projects    json.RawMessage `json:"projects"`
}

func (q *Queries) GetTeam(ctx context.Context, id int32) (GetTeamRow, error) {
	row := q.db.QueryRowContext(ctx, getTeam, id)
	var i GetTeamRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Leads,
		&i.Members,
		&i.Projects,
	)
	return i, err
}

const updateTeam = `-- name: UpdateTeam :one
UPDATE teams set
    name = $1,
    description = $2,
    updated_at = NOW()
WHERE
    id = $3
RETURNING id, name, description, created_at, updated_at, deleted_at
`

type UpdateTeamParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, updateTeam, arg.Name, arg.Description, arg.ID)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
