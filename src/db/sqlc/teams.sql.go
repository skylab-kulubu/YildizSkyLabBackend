// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: teams.sql

package sqlc

import (
	"context"
)

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (
    name,
    description,
    created_at,
    updated_at
) VALUES (
    $1,
    $2,
    NOW(),
    NOW()
) RETURNING id, name, description, created_at, updated_at, deleted_at
`

type CreateTeamParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, createTeam, arg.Name, arg.Description)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteTeam = `-- name: DeleteTeam :exec
UPDATE teams set
    deleted_at = NOW()
WHERE
    id = $1
`

func (q *Queries) DeleteTeam(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTeam, id)
	return err
}

const getAllTeams = `-- name: GetAllTeams :many
SELECT
    t.id AS team_id,
    t.name,
    t.description,
    COALESCE(STRING_AGG(DISTINCT u.name, ',')) AS lead_names,
    COALESCE(STRING_AGG(DISTINCT p.name, ',')) AS project_names
FROM
    teams t
LEFT JOIN
    team_users tu ON t.id = tu.team_id AND tu.role = 'lead'
LEFT JOIN
    users u ON tu.user_id = u.id
LEFT JOIN
    team_projects tp ON t.id = tp.team_id
LEFT JOIN
    projects p ON tp.project_id = p.id
WHERE
    t.deleted_at IS NULL
GROUP BY
    t.id, t.name
LIMIT $1 OFFSET $2
`

type GetAllTeamsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllTeamsRow struct {
	TeamID       int32       `json:"team_id"`
	Name         string      `json:"name"`
	Description  string      `json:"description"`
	LeadNames    interface{} `json:"lead_names"`
	ProjectNames interface{} `json:"project_names"`
}

func (q *Queries) GetAllTeams(ctx context.Context, arg GetAllTeamsParams) ([]GetAllTeamsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllTeams, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllTeamsRow{}
	for rows.Next() {
		var i GetAllTeamsRow
		if err := rows.Scan(
			&i.TeamID,
			&i.Name,
			&i.Description,
			&i.LeadNames,
			&i.ProjectNames,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeam = `-- name: GetTeam :one
SELECT
    t.id AS team_id,
    t.name,
    t.description,
    COALESCE(STRING_AGG(DISTINCT u.name, ',')) AS lead_names,
    COALESCE(STRING_AGG(DISTINCT p.name, ',')) AS project_names
FROM
    teams t
LEFT JOIN
    team_users tu ON t.id = tu.team_id AND tu.role = 'lead'
LEFT JOIN
    users u ON tu.user_id = u.id
LEFT JOIN
    team_projects tp ON t.id = tp.team_id
LEFT JOIN
    projects p ON tp.project_id = p.id
WHERE
    t.deleted_at IS NULL AND t.id = $1
GROUP BY
    t.id, t.name
`

type GetTeamRow struct {
	TeamID       int32       `json:"team_id"`
	Name         string      `json:"name"`
	Description  string      `json:"description"`
	LeadNames    interface{} `json:"lead_names"`
	ProjectNames interface{} `json:"project_names"`
}

func (q *Queries) GetTeam(ctx context.Context, id int32) (GetTeamRow, error) {
	row := q.db.QueryRowContext(ctx, getTeam, id)
	var i GetTeamRow
	err := row.Scan(
		&i.TeamID,
		&i.Name,
		&i.Description,
		&i.LeadNames,
		&i.ProjectNames,
	)
	return i, err
}

const updateTeam = `-- name: UpdateTeam :one
UPDATE teams set
    name = $1,
    description = $2,
    updated_at = NOW()
WHERE
    id = $3
RETURNING id, name, description, created_at, updated_at, deleted_at
`

type UpdateTeamParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, updateTeam, arg.Name, arg.Description, arg.ID)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
